{"version":3,"sources":["../../../src/utils/map-controller.js"],"names":["MapState","LinearInterpolator","TransitionManager","TRANSITION_EVENTS","NO_TRANSITION_PROPS","transitionDuration","LINEAR_TRANSITION_PROPS","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","ZOOM_ACCEL","EVENT_TYPES","WHEEL","PAN","PINCH","DOUBLE_TAP","KEYBOARD","MapController","constructor","_state","isDragging","_transitionManager","events","handleEvent","bind","setState","event","mapState","getMapState","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onDoubleTap","_onWheel","_onKeyDown","getCenter","offsetCenter","x","y","isFunctionKeyPressed","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","newState","Object","assign","onStateChange","updateViewport","newMapState","extraProps","extraState","oldViewport","getViewportProps","newViewport","viewStateChanged","keys","some","key","onViewportChange","getInteractiveState","overrides","mapStateProps","setOptions","options","eventManager","isInteractive","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","height","processViewportChange","_events","toggleEvents","eventNames","enabled","forEach","eventName","on","off","pos","panStart","rotateStart","rightButton","_onPanRotate","_onPanMove","panEnd","rotateEnd","isPanning","isRotating","pan","deltaX","deltaY","centerY","startY","width","deltaScaleX","deltaScaleY","Math","abs","min","max","rotate","preventDefault","delta","scale","exp","zoom","isZooming","zoomStart","startPinchRotation","rotation","zoomEnd","isZoomOut","around","funcKey","keyCode","bearing","startPos","pitch"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport MapState from './map-state';\nimport {LinearInterpolator} from './transition';\nimport TransitionManager, {TRANSITION_EVENTS} from './transition-manager';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n// EVENT HANDLING PARAMETERS\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\nconst ZOOM_ACCEL = 0.01;\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nexport default class MapController {\n  /**\n   * @classdesc\n   * A class that handles events and updates mercator style viewport parameters\n   */\n  constructor() {\n    this._state = {\n      isDragging: false\n    };\n    this._transitionManager = new TransitionManager();\n    this.events = [];\n    this.handleEvent = this.handleEvent.bind(this);\n    this.setState = this.setState.bind(this);\n  }\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent(event) {\n    this.mapState = this.getMapState();\n\n    switch (event.type) {\n    case 'panstart':\n      return this._onPanStart(event);\n    case 'panmove':\n      return this._onPan(event);\n    case 'panend':\n      return this._onPanEnd(event);\n    case 'pinchstart':\n      return this._onPinchStart(event);\n    case 'pinchmove':\n      return this._onPinch(event);\n    case 'pinchend':\n      return this._onPinchEnd(event);\n    case 'doubletap':\n      return this._onDoubleTap(event);\n    case 'wheel':\n      return this._onWheel(event);\n    case 'keydown':\n      return this._onKeyDown(event);\n    default:\n      return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {offsetCenter: {x, y}} = event;\n    return [x, y];\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey ||\n      srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  setState(newState) {\n    Object.assign(this._state, newState);\n    if (this.onStateChange) {\n      this.onStateChange(this._state);\n    }\n  }\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newMapState, extraProps = {}, extraState = {}) {\n    const oldViewport = this.mapState ? this.mapState.getViewportProps() : {};\n    const newViewport = Object.assign({}, newMapState.getViewportProps(), extraProps);\n\n    const viewStateChanged =\n      Object.keys(newViewport).some(key => oldViewport[key] !== newViewport[key]);\n\n    // viewState has changed\n    if (viewStateChanged) {\n      this.onViewportChange(newViewport, extraState, oldViewport);\n    }\n\n    this.setState(Object.assign({}, newMapState.getInteractiveState(), extraState));\n  }\n\n  getMapState(overrides) {\n    return new MapState(Object.assign({}, this.mapStateProps, this._state, overrides));\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setOptions(options) {\n    const {\n      onViewportChange,\n      onStateChange,\n      eventManager = this.eventManager,\n\n      isInteractive = true,\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = options;\n\n    this.onViewportChange = onViewportChange;\n    this.onStateChange = onStateChange;\n\n    if (this.mapStateProps && this.mapStateProps.height !== options.height) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(new MapState(options));\n    }\n\n    this.mapStateProps = options;\n    // Update transition\n    this._transitionManager.processViewportChange(Object.assign({}, options, {\n      onStateChange: this.setState\n    }));\n\n    if (this.eventManager !== eventManager) {\n      // EventManager has changed\n      this.eventManager = eventManager;\n      this._events = {};\n      this.toggleEvents(this.events, true);\n    }\n\n    // Register/unregister events\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.panStart({pos}).rotateStart({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event) {\n    return this.isFunctionKeyPressed(event) || event.rightButton ?\n      this._onPanRotate(event) : this._onPanMove(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event) {\n    const newMapState = this.mapState.panEnd().rotateEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.pan({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isPanning: true});\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const {deltaX, deltaY} = event;\n    const [, centerY] = this.getCenter(event);\n    const startY = centerY - deltaY;\n    const {width, height} = this.mapState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n\n    const newMapState = this.mapState.rotate({deltaScaleX, deltaScaleY});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isRotating: true});\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    event.srcEvent.preventDefault();\n\n    const pos = this.getCenter(event);\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newMapState = this.mapState.zoom({pos, scale});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isZooming: true});\n    // This is a one-off event, state should not persist\n    this.setState({isZooming: false});\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._state.startPinchRotation = event.rotation;\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    let newMapState = this.mapState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newMapState = newMapState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      const {startPinchRotation} = this._state;\n      newMapState = newMapState.rotate({deltaScaleX: -(rotation - startPinchRotation) / 180});\n    }\n\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    return true;\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event) {\n    const newMapState = this.mapState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false,\n      isZooming: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newMapState = this.mapState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(newMapState, Object.assign({}, LINEAR_TRANSITION_PROPS, {\n      transitionInterpolator: new LinearInterpolator({around: pos})\n    }));\n    return true;\n  }\n\n  /* eslint-disable complexity */\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {mapStateProps} = this;\n    let newMapState;\n\n    switch (event.srcEvent.keyCode) {\n    case 189: // -\n      if (funcKey) {\n        newMapState = this.getMapState({zoom: mapStateProps.zoom - 2});\n      } else {\n        newMapState = this.getMapState({zoom: mapStateProps.zoom - 1});\n      }\n      break;\n    case 187: // +\n      if (funcKey) {\n        newMapState = this.getMapState({zoom: mapStateProps.zoom + 2});\n      } else {\n        newMapState = this.getMapState({zoom: mapStateProps.zoom + 1});\n      }\n      break;\n    case 37: // left\n      if (funcKey) {\n        newMapState = this.getMapState({bearing: mapStateProps.bearing - 15});\n      } else {\n        newMapState = this.mapState.pan({pos: [100, 0], startPos: [0, 0]});\n      }\n      break;\n    case 39: // right\n      if (funcKey) {\n        newMapState = this.getMapState({bearing: mapStateProps.bearing + 15});\n      } else {\n        newMapState = this.mapState.pan({pos: [-100, 0], startPos: [0, 0]});\n      }\n      break;\n    case 38: // up\n      if (funcKey) {\n        newMapState = this.getMapState({pitch: mapStateProps.pitch + 10});\n      } else {\n        newMapState = this.mapState.pan({pos: [0, 100], startPos: [0, 0]});\n      }\n      break;\n    case 40: // down\n      if (funcKey) {\n        newMapState = this.getMapState({pitch: mapStateProps.pitch - 10});\n      } else {\n        newMapState = this.mapState.pan({pos: [0, -100], startPos: [0, 0]});\n      }\n      break;\n    default:\n      return false;\n    }\n    return this.updateViewport(newMapState, LINEAR_TRANSITION_PROPS);\n  }\n  /* eslint-enable complexity */\n}\n"],"file":"map-controller.js"}