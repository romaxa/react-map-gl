{"version":3,"sources":["../../../src/utils/transition-manager.js"],"names":["assert","LinearInterpolator","MapState","noop","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","DEFAULT_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","onViewportChange","onStateChange","DEFAULT_STATE","animation","propsInTransition","startProps","endProps","TransitionManager","constructor","props","state","_onTransitionFrame","bind","getViewportInTransition","processViewportChange","nextProps","transitionTriggered","currentProps","_shouldIgnoreViewportChange","isTransitionInProgress","_isTransitionInProgress","_isTransitionEnabled","Object","assign","interruption","_triggerTransition","_endTransition","Boolean","_isUpdateDueToCurrentTransition","interpolator","arePropsEqual","cancelAnimationFrame","initialProps","initializeProps","interactionState","inTransition","isZooming","zoom","isPanning","longitude","latitude","isRotating","bearing","pitch","duration","easing","startTime","Date","now","start","end","requestAnimationFrame","_updateViewport","currentTime","shouldEnd","viewport","interpolateProps","mapState","getViewportProps","defaultProps"],"mappings":"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","sourcesContent":["/* global requestAnimationFrame, cancelAnimationFrame */\nimport assert from './assert';\nimport {LinearInterpolator} from './transition';\nimport MapState from './map-state';\n\nconst noop = () => {};\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\n\nconst DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop,\n  onViewportChange: noop,\n  onStateChange: noop\n};\n\nconst DEFAULT_STATE = {\n  animation: null,\n  propsInTransition: null,\n  startProps: null,\n  endProps: null\n};\n\nexport default class TransitionManager {\n  constructor(props) {\n    this.props = props;\n    this.state = DEFAULT_STATE;\n\n    this._onTransitionFrame = this._onTransitionFrame.bind(this);\n  }\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this.state.propsInTransition;\n  }\n\n  // Process the viewport change, either ignore or trigger a new transiton.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewportChange(nextProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    this.props = nextProps;\n\n    if (!currentProps) {\n      return false;\n    }\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return transitionTriggered;\n    }\n\n    const isTransitionInProgress = this._isTransitionInProgress();\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const startProps = Object.assign({}, currentProps,\n        this.state.interruption === TRANSITION_EVENTS.SNAP_TO_END ?\n        this.state.endProps : this.state.propsInTransition\n      );\n\n      if (isTransitionInProgress) {\n        currentProps.onTransitionInterrupt();\n      }\n      nextProps.onTransitionStart();\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else if (isTransitionInProgress) {\n      currentProps.onTransitionInterrupt();\n      this._endTransition();\n    }\n\n    return transitionTriggered;\n  }\n\n  // Helper methods\n\n  _isTransitionInProgress() {\n    return Boolean(this.state.propsInTransition);\n  }\n\n  _isTransitionEnabled(props) {\n    return props.transitionDuration > 0 && Boolean(props.transitionInterpolator);\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.state.propsInTransition) {\n      return this.state.interpolator.arePropsEqual(props, this.state.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (this._isTransitionInProgress()) {\n      // Ignore update if it is requested to be ignored\n      return this.state.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps);\n    } else if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    assert(this._isTransitionEnabled(endProps), 'Transition is not enabled');\n\n    cancelAnimationFrame(this.state.animation);\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(\n      startProps,\n      endProps\n    );\n\n    const interactionState = {\n      inTransition: true,\n      isZooming: startProps.zoom !== endProps.zoom,\n      isPanning: startProps.longitude !== endProps.longitude ||\n        startProps.latitude !== endProps.latitude,\n      isRotating: startProps.bearing !== endProps.bearing ||\n        startProps.pitch !== endProps.pitch\n    };\n\n    this.state = {\n      // Save current transition props\n      duration: endProps.transitionDuration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startTime: Date.now(),\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n      animation: null,\n      propsInTransition: {},\n      interactionState\n    };\n\n    this._onTransitionFrame();\n    this.props.onStateChange(interactionState);\n  }\n\n  _onTransitionFrame() {\n    // _updateViewport() may cancel the animation\n    this.state.animation = requestAnimationFrame(this._onTransitionFrame);\n    this._updateViewport();\n  }\n\n  _endTransition() {\n    cancelAnimationFrame(this.state.animation);\n    this.state = DEFAULT_STATE;\n    this.props.onStateChange({\n      inTransition: false,\n      isZooming: false,\n      isPanning: false,\n      isRotating: false\n    });\n  }\n\n  _updateViewport() {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const currentTime = Date.now();\n    const {startTime, duration, easing, interpolator, startProps, endProps} = this.state;\n\n    let shouldEnd = false;\n    let t = (currentTime - startTime) / duration;\n    if (t >= 1) {\n      t = 1;\n      shouldEnd = true;\n    }\n    t = easing(t);\n\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n      // Normalize viewport props\n    const mapState = new MapState(Object.assign({}, this.props, viewport));\n    this.state.propsInTransition = mapState.getViewportProps();\n\n    this.props.onViewportChange(\n      this.state.propsInTransition,\n      this.state.interactionState,\n      this.props\n    );\n\n    if (shouldEnd) {\n      this._endTransition();\n      this.props.onTransitionEnd();\n    }\n  }\n}\n\nTransitionManager.defaultProps = DEFAULT_PROPS;\n"],"file":"transition-manager.js"}